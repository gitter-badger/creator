# Copyright (C) 2015 Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import re

define('cc', 'cl /nologo')
define('cpp', 'cl /nologo')
define('ar', 'lib /nologo /OUT:$(quote $0)')
define('compileonly', '/c')
define('wall', '/Wall')
define('g', '/Zi /g')
define('exceptions', '/EHsc')

define('include', '$(quotesplit $(addprefix /I,$0))')
define('define', '$(quotesplit $(addprefix /D,$0))')
define('libpath', '$(quotesplit $(addprefix /LIBPATH:,$0))')
define('lib', '$(quotesplit $0)')

define('objout', '/Fo$(quote $0)')
define('binout', '/Fe$(quote $0)')

define('O0', '')
define('O1', '/O1')
define('O2', '/O2')
define('O3', '/O2')  # O3 not supported
define('Os', '/Os')
define('Ofast', '/Ot')
define('Og', '/Od')

# Detect the Platform Toolset Version and Target Architecture.
try:
  line = shell_get('cl').readline().strip()
except OSError:
  # "cl" not found
  pass
except ExitCodeError:
  # "cl" exited with non-zero exit code
  info('# Warning: "cl" exited with non-zero exit code.')
  pass
else:
  match = re.match('Microsoft.*Compiler\s+Version\s+([\d\.]+).*(x86|x64)', line, re.I)
  if not match:
    info('# Warning: "cl" returned unexpected output.')
  else:
    define('Detected', 'true')
    define('Version', match.group(1))
    define('Arch', match.group(2))
